#!/usr/bin/env ruby
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

$:.push File.dirname(__FILE__)

require 'tsc/application.rb'

class Application < TSC::Application
  PROJECT_DIR = 'project'
  def start
    options['verbose'] = true
    handle_errors {
      @top = File.dirname(script_location)

      commands = find_in_path script_name
      commands.shift while commands[0] == $0

      raise "No #{script_name.inspect} in PATH" if commands.empty?
      invoke commands.first
    }
  end

  private
  #######
  def config(*args)
    File.join @top, 'config', *args
  end

  def project_config(*args)
    File.join @top, PROJECT_DIR, 'config', *args
  end

  def find_in_path(command)
    ENV['PATH'].split(File::PATH_SEPARATOR).map { |_path|
      Dir[ File.join(_path, command) ]
    }.flatten
  end

  def bootstrap_file
    @bootstrap_file ||= config('Jam.bootstrap')
  end

  def project_config_file
    @project_config_file ||= project_config('jam-config.rb')
  end

  def invoke(command)
    jam_options = []
    jam_project_options = []

    if File.file? bootstrap_file
      jam_options = [
	'-f', bootstrap_file,
	'-s', "PROJECT_DIR=#{PROJECT_DIR}",
        '-s', "JAM=#{__FILE__}", 
	'-s', "CWD=#{Dir.getwd}"
      ]
      unless ENV.has_key? 'JAM_NOTQUICK'
	jam_options.push '-q' ;
      end

      if File.file? project_config_file
	load project_config_file, false
	jam_project_options = JamConfig.new.options
      end
    end
    exec command, *(jam_options + jam_project_options + ARGV)
  end
end

Application.new.start
