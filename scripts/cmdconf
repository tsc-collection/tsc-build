#!/bin/ksh
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

    IDENT="@(#)Title:     Command configuration"
   AUTHOR="@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)"
  VERSION="@(#)Version:   1.0"
COPYRIGHT="@(#)Copyright: Tone Software Corporation, Inc. (1998)"
PRODSTAMP="
######################################################################
# Command configuration. Copyright(c) 1998 Tone Software Corporation #
######################################################################
"
unset ERRLOG

RedirectErrors=YES
 ShowProdStamp=NO
       SigList="1 2 3 8 15"

PrintUsage () 
{
  ShowMsg "USAGE: $ScriptName [-x<debug level>][-l<labels>][-pn] {stop|start}"
}

CleanUp () 
{
  eval `EntryPoint 3`
  [ "${ERRLOG:+set}" = set ] && rm -f "$ERRLOG"
}

main () 
{
  unset LABEL_LIST PRINT_LABELS TOPDIR DONOTHING
  [ $# -eq 0 ] || {
    while getopts "x:l:pnt:" opt; do
      case "$opt" in
        x)
          DebugLevel=$OPTARG
          [ "$DebugLevel" -ge 1 ] && {
            exec 1>&3 2>&4
          }
        ;;
        l)
          LABEL_LIST=$OPTARG
        ;;
        p)
          PRINT_LABELS=YES
        ;;
        n)
          DONOTHING=YES
        ;;
        t)
          TOPDIR=$OPTARG
        ;;
        *) 
          PrintUsage
          return 2
        ;;
      esac
    done
    shift `expr $OPTIND - 1`
  }
  eval `EntryPoint 1`
  [ $# -ge 1 ] || {
    PrintUsage
    return2
  }
  action=$1
  shift
  case "$action" in
    start)
      startProduct "$@"
    ;;
    stop)
      stopProduct "$@"
    ;;
    *)
      PrintUsage
      return 2
    ;;
  esac
  return $?
}

startProduct ()
{
  eval `EntryPoint 2`
  return 0
}

stopProduct ()
{
  eval `EntryPoint 2`
  for prog in "$@"; do
    list=`fuser $prog 2>/dev/null`
    for pid in $list; do
      kill $pid
      while true; do
        kill -0 "$pid" || break
      done &
      pid_check=$!
      (sleep 3; kill -9 "$pid_check")&
      pid_sleep=$!
      wait "$pid_check"
      kill -9 "$pid_sleep"
      wait
      pid=`ps -e -o pid|grep $pid`
      [ "${pid:+set}" = set ] && {
        ErrMsg "Cannot stop process $pid"
        return 3
      }
    done
  done
  return 0
}

##################
# Script Library #
##################

ScriptName=`basename $0`; status=0; umask 0
AWK=nawk; { $AWK ''; } >/dev/null 2>&1 || AWK=awk

> "${ERRLOG:=/tmp/$ScriptName.$$}"
exec 3>&1 4>&2 
[ "$RedirectErrors" = YES ] && exec 2>"$ERRLOG" 1>&2

UPPER="[A-Z]"; LOWER="[a-z]"
tr "[A-Z]" "[a-z]" </dev/null 1>&0 2>&1 || {
  UPPER="[:upper:]"; LOWER="[:lower:]"
}

tolower () 
{
  echo $*|tr "$UPPER" "$LOWER"
}

toupper () 
{
  echo $*|tr "$LOWER" "$UPPER"
}

ErrMsg () 
{
  echo "$ScriptName: $*" 1>&4 2>&1
}

ShowMsg () 
{
  echo "$*" 1>&3 2>&4
}

runEcho ()
{
  ShowMsg "$*"
  "$@" 1>&3 2>&4
  status=$?
  return $status
}

GenDirPath () 
{
  [ $# -eq 1 ] && {
    (cd "$1">/dev/null 2>&1  && pwd)
  }
  return $?
}

ShowProgress () 
{
  cnt=0; max=${2:-75}
  while read line;do
    [ "$cnt" -eq 0 ] && ShowMsg "${1:-Doing} \c"
    ShowMsg ".\c"; cnt=`expr $cnt + 1`
    [ $cnt -gt "$max" ] && {
      cnt=0; ShowMsg;
    }
  done
  [ $cnt -eq 0 ] || ShowMsg
}

PrintVars () 
{
  for v in "$@"; do
    eval echo $v=\$$v
  done
}

VerifyDir () 
{
  eval test -d "$1" -a -r "$1"; return $?
}

VerifyFile () 
{
  eval test -f "$1" -a -r "$1"; return $?
}

VerifyProg () 
{
  eval test -f "$1" -a -x "$1"; return $?
}

ExtractValues () 
{
  [ $# -gt 1 ] && {
    file=$1; unset pattern; shift
    for arg
    do
      arg=`echo $arg|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/$search/$replace/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "$file" && {
      eval `sed -n "$pattern"<"$file"`
    }
  }
}

EntryPoint () 
{
  [ "${DebugLevel:=0}" -ge "${1:-1}" ] && {
    echo 'echo "[Function: $0]" 1>&2; set -xv'
  }
}

AwkLibrary='
  function norm(str){
    while(substr(str,1,1)==" ") str = substr(str,2);
    while(substr(str,length(str),1)==" ")
      str = substr(str,1,length(str)-1)
    return str
  }
'

trap CleanUp 0 $SigList
[ "$ShowProdStamp" = YES ] &&  ShowMsg "$PRODSTAMP"

main "$@"
exit $?

#############
# TEMPLATES #
#############

Fun () 
{
  eval `EntryPoint 5`
  return 0
}

$AWK '
  '"$AwkLibrary"'
'

#############
#############
