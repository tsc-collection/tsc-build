#!/bin/ksh
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

#@(#)Title:     Jar merger
#@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)
#@(#)Version:   1.0
#@(#)Copyright: Tone Software Corporation, Inc. (1999-2000)

PRODSTAMP='
###########################################################
# Jar Merger. Copyright(c) 2000 Tone Software Corporation #
###########################################################
'
DESCRIPTION="
  Merges several jar archives.
"
ARGUMENTS="
  [-x<debug level>][-h] <jar> <jar> [<jar>...]
"
    RedirectErrors=NO
ShowCleanupMessage=NO
     ShowProdStamp=NO
           SigList="1 2 3 8 15"

main () 
{
  eval `EntryPoint 1 main`

  ParseCommandParameters "" "${@}" || {
    PrintUsage
    return 2
  }
  eval `EntryPoint 1 main`
  return 0
}

OnOption ()
{
  eval `EntryPoint 3 OnOption`

  case "${1}" in 
    *)
      return 1
    ;;
  esac
  return 0
}

OnArguments ()
{
  eval `EntryPoint 2 OnArguments`
  mergeJars "${@}"
}

mergeJars()
{
  eval `EntryPoint 2 mergeJars`

  [ ${#} -lt 2 ] && {
    return 2
  }
  TEMPDIR="/tmp/${ScriptName}.dir.$$"
  UpdateCleanupList "${TEMPDIR}"
  rm -rf "${TEMPDIR}"
  mkdir -p "${TEMPDIR}" || {
    ErrMsg "Cannot create temporary directory."
    exit 3
  }
  unset target_jar
  for jar in "${@}"; do
    [ -f "${jar}" ] || {
      ErrMsg "Jar archive \"${jar}\" is not available."
      exit 3
    }
    case "${jar}" in
      /*) ;;
      *)
	jar="`pwd`/${jar}"
      ;;
    esac
    [ "${target_jar:+set}" != set ] && {
      target_jar=${jar}
      continue
    }
    status=0
    eval `{
      cd "${TEMPDIR}" && {
        ShowMsg "Extracting \"${jar}\""
	jar xvf "${jar}" || {
	  ErrMsg "Cannot extract from \"${jar}\"."
	  echo status=3 1>&5
	  exit 3
	}
	rm -rf META-INF
      } | ShowProgress
    } 5>&1`
    [ "${status}" -ne 0 ] && {
      CleanUp
      exit "${status}"
    }
  done
  [ "${target_jar:+set}" = set ] && {
    status=0
    eval `{
      cd "${TEMPDIR}" && {
	ShowMsg "Updating \"${target_jar}\""
	jar uvf "${target_jar}" * || {
	  ErrMsg "Cannot update \"${target_jar}\"."
	  echo status=3 1>&5
	  exit 3
	}
      } | ShowProgress
    } 5>&1`
    CleanUp
    exit "${status}"
  }
  exit 0
}

##################################################
## Here 'library.sh' must be copied or included ##
##################################################
. library.sh
