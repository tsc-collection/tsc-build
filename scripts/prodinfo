#!/bin/ksh
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

#@(#)Title:     Get package credentials
#@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)
#@(#)Version:   2.0
#@(#)Copyright: Tone Software Corporation, Inc. (1999-2000)

PRODSTAMP='
#################################################################
# Get package info. Copyright(c) 2000 Tone Software Corporation #
#################################################################
'
DESCRIPTION="
  Determines package name, version, patch level and base depot location (p4)
"
ARGUMENTS="
  [-x<debug level>][-h][-n][-v][-p][-b]
"
    RedirectErrors=NO
ShowCleanupMessage=NO
     ShowProdStamp=NO
           SigList="1 2 3 8 15"

main () 
{
  eval `EntryPoint 1 main`

  unset NAME VERSION PATCH
  ParseCommandParameters "nvpb" "${@}" || {
    PrintUsage
    return 2
  }
  eval `EntryPoint 1 main`
  [ "${NAME:-a}${VERSION:-b}${PATCH:-c}${BASE:-d}" = "abcd" ] && {
    NAME=yes
    VERSION=yes
    PATCH=yes
  }
  entry=`getPackageInfo`
  eval `SetInputFields entry`
  [ ${#} -eq 3 ] && {
    package=${1}
    version=${2}
    base="${3}/${1}"
    [ "${version}" != "-" ] && {
      base="${base}/${version}"
    }
    version=`echo ${version}|sed -n '/^[0-9][0-9]*\.[0-9][0-9]*$/p'`
    : ${version:=0.0}
    unset output
    [ "${NAME}" = yes ] && {
      output="${package} "
    }
    [ "${VERSION}" = yes ] && {
      output="${output} ${version}"
    }
    [ "${PATCH}" = yes ] && {
      output="${output} `getPatch "${package}" "${version}"`"
    }
    [ "${BASE}" = yes ] && {
      output="${output} ${base}"
    }
    echo ${output}
  }
  return 0
}

OnOption ()
{
  eval `EntryPoint 2 OnOption`
  case "${1}" in 
    n)
      NAME=yes
    ;;
    v)
      VERSION=yes
    ;;
    p)
      PATCH=yes
    ;;
    b)
      BASE=yes
    ;;
    *)
      return 1
    ;;
  esac
  return 0
}

OnArguments ()
{
  eval `EntryPoint 2 OnArguments`
  return ${#}
}

getPackageInfo ()
{
  eval `EntryPoint 3 getPackageInfo`
  pwd=`pwd`
  set entry `echo "${pwd}/" | {
    sed -n 's%^.*/src/project/\([^/][^/]*\)\(/.*\)$%\1 \2%p'
  }`
  shift
  srcpkg=${1}
  srcdir=${2}
  [ "${srcpkg:+set}" = set ] && {
    p4 dirs . 2>&1 | read line
    set entry `echo "${line}/" | {
      sed -n 's%^\(//.*/project\)/\([^/][^/]*\)\(/.*\)$%\1 \2 \3%p'
    }`
    shift
    [ ${#} -eq 3 ] && {
      depot=${1}
      depotpkg=${2}
      depotdir=${3}
      [ "${srcpkg}" = "${depotpkg}" ] && {
	unset version
	[ "${srcdir}" != "${depotdir}" ] && {
	  version=`echo "${depotdir}" | {
	    sed -n 's%^/\([^/][^/]*\)'"${srcdir}"'$%\1%p'
	  }`
	}
	echo "${srcpkg:--}" "${version:--}" "${depot:--}"
      }
    }
  }
  return 0
}

getPatch ()
{
  eval `EntryPoint 3 getPatch`
  package=${1}
  version=${2}
  patch="-1"
  p4 labels | {
    sed -n 's/^Label '"${package}-${version}"'-\([0-9][0-9]*\).*$/\1/p'
  } | {
    while read entry; do
      [ "${patch}" -lt "${entry}" ] && {
	patch=${entry}
      }
    done
  }
  expr "${patch}" + 1
  return 0
}

##################################################
## Here 'library.sh' must be copied or included ##
##################################################
. library.sh
