#!/usr/local/bin/ruby
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

$:.concat ENV['PATH'].split(':')

require 'tsc/application'
require 'tsc.product'

class Application < TSC::Application
  def initialize
    super(
      ['--plain',   'Print in simple format', nil, '-p' ],
      ['--last',    'Print last build',       nil, '-l' ],
      ['--next',    'Print next build',       nil, '-n' ],
      ['--release', 'Print release',          nil, '-r' ]
    )
  end

  def start
    handle_errors do
      process_command_line

      actions = [ 'last', 'next', 'plain', 'release' ].select { |_action|
	options.key? _action
      }
      actions.push 'default' if actions.empty?

      raise "Only one action at a time is allowed" if actions.size > 1
      raise TSC::UsageError, "Arguments are not allowed" unless ARGV.empty?

      product = TSC::Product.detect
      @name = product.name
      @release = product.release
      @build = product.build

      puts self.send("output_#{actions.first}")
    end
  end

  private
  #######
  def output_last
    "#{@name}.#{@release}.#{@build}"
  end
  def output_next
    "#{@name}.#{@release}.#{@build.to_i + 1}"
  end
  def output_plain
    "#{@name} #{@release} #{@build}"
  end
  def output_release
    "#{@release}.#{@build}"
  end
  def output_default
    "branch //#{@name}/#{@release} build #{@build}"
  end
end

Application.new.start
