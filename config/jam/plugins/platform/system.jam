# vim: ft=jam: sw=2: tw=100:
# Copyright (c) 2010, Gennady Bystritsky <bystr@mac.com>
#
# Distributed under the MIT Licence.
# This is free software. See 'LICENSE' for details.
# You must read and accept the license prior to use.
#
# Author: Gennady Bystritsky

rule platform.system.init
{
  platform.system.KNOWN =
    linux-x86
    linux-ia64
    solaris-sparc
    solaris-x86
    hpux-pa
    hpux-ia64
    aix-ppc
    mswin-x86
    darwin-x86
  ;
  platform.SPECIFIED_ABI = ;
  platform.ABI = ;
  platform.system.MISSING_FATAL = true ;
}

rule platform.is-abi-mismatch-fatal
{
  return $(platform.config.ABI_MISMATCH_FATAL:E=$(1:E=true)) ;
}

rule platform.is-abi-none-fatal
{
  return $(platform.config.ABI_NONE_FATAL:E=$(1:E=false)) ;
}

rule platform.system.handle-build-abi
{
  platform.SPECIFIED_ABI = $(2) ;
  platform.ABI = $(platform.SPECIFIED_ABI:E=$(1[1]:E=64)) ;

  if ! ( $(platform.ABI) in $(1) ) {
    core.arrange-exit [ platform.is-abi-mismatch-fatal $(4) ] : Unsupported ABI $(platform.ABI) for $(platform.NAME). Must be $(1), or empty ;
    return ;
  }
  switch $(platform.ABI) {
    case 64 : platform.ABILIB = lib64 ;
    case * : platform.ABILIB = lib ;
  }
  if $(1[2-]) {
    if ( ! $(platform.SPECIFIED_ABI) ) && ( [ platform.is-abi-none-fatal $(3) ] = true ) {
      core.exit No ABI specified ;
    }
    core.call platform-$(platform.FAMILY)-m$(platform.ABI) ;
  }
  else platform.ABILIB = lib ;
  core.call platform-$(platform.FAMILY) ;
}

rule platform.system.process-missing
{
  if $(platform.system.MISSING_FATAL) = true {
    core.exit Platform configuration block $(core.BACKTRACE[1]) not found ;
  }
  core.trace platform : Abstract rule invocation => $(core.BACKTRACE[1]) ;
}

if $(platform.system.INIT) != true {
  platform.system.INIT = true ;
  platform.system.init ;
}
