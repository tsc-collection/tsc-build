# vim: ft=jam: sw=2:
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

rule use-project-library { use-project-libraries $(1) : $(2) ; }
rule add-project-library { add-project-libraries $(1) : $(2) : $(3) ; }

rule use-c++-project-library { use-c++-project-libraries $(1) : $(2) ; }
rule add-c++-project-library { add-c++-project-libraries $(1) : $(2) : $(3) ; }

rule use-top-library { use-top-libraries $(1) : $(2) ; }
rule add-top-library { add-top-libraries $(1) : $(2) : $(3) ; }

rule add-project-library-without { add-project-libraries $(1) : $(2) : $(3) ; }
rule add-project-libraries-without { add-project-libraries $(1) : $(2) : $(3) ; }

rule add-top-library-without { add-top-libraries $(1) : $(2) : $(3) ; }
rule add-top-libraries-without { add-top-libraries $(1) : $(2) : $(3) ; }

rule use-project-jni-module { use-project-jni-modules $(1) : $(2) ; }
rule use-local-library { use-local-libraries $(1) : $(2) ; }
rule use-local-include { use-local-includes $(1) : $(2) ; }
rule make-subdir { make-subdirs $(1) ; }

rule make-subdirs
{
  util.foreach $(1) : system.load-jamfile-from ;
}

rule make-program
{
  local _target = [ system.make-program $(1) : $(2) : $(3) ] ;

  system.invoke run@$(system.DOT_TARGET) : $(_target) ;
  system.setup-program-targets-in-cwd $(_target) ;
  system.setup-try-libs-for $(_target) ;

  return $(_target) ;
}

rule setup-script
{
  local _target = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;

  system.propagate-proxy-settings $(_target) : $(2:E=$(1)) ;

  system.invoke run@$(system.DOT_TARGET) : $(_target) : $(3) : $(4) ;
  system.invoke test@$(system.DOT_TARGET) : $(_target) : test $(3) : $(4) ;
  system.invoke specs@$(system.DOT_TARGET) : $(_target) : specs $(3) : $(4) ;
  system.setup-program-targets-in-cwd $(_target) ;
}

rule setup-ruby-script
{
  local _target = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;

  system.propagate-proxy-settings $(_target) : $(2:E=$(1)) ;

  action.invoke-ruby run@$(system.DOT_TARGET) : $(_target) : $(3) : $(4) ;
  action.invoke-ruby test@$(system.DOT_TARGET) : $(_target) : test $(3) : $(4) ;
  action.invoke-ruby specs@$(system.DOT_TARGET) : $(_target) : specs $(3) : $(4) ;

  system.setup-program-targets-in-cwd $(_target) ;
}

rule make-cpp-test
{
  local _target = [ system.make-program $(1) : $(2) : $(3) ] ;
  system.invoke test@$(system.DOT_TARGET) : $(_target) : : $(system.SRCDIR) ;
  system.setup-program-targets-in-cwd $(_target) ;
}

rule run-ruby-tests
{
  local _file _target ;
  for _file  in $(1) {
    Always $(_file) ;

    _target = $(_file)@$(system.DOT_TARGET) ;
    _source = [ util.make-path $(system.SRCDIR) $(_file) ] ;

    Depends $(_target) : $(_source) ;
    Depends test@$(system.DOT_TARGET) : $(_target) ;
    Depends $(_file) : $(_target) ;

    util.set-target-variable $(_target) : LOADPATH : $(system.SRCDIR) ;
    util.set-target-variable $(_target) : ARGUMENTS : $(2) ;

    action.invoke-ruby $(_target) : $(_source) ;
  }
}

rule run-ruby-specs
{
  local _file _target ;
  for _file  in $(1) {
    Always $(_file) ;

    _target = $(_file)@$(system.DOT_TARGET) ;
    _source = [ util.make-path $(system.SRCDIR) $(_file) ] ;

    Depends specs-$(_target) : $(_source) ;
    Depends test-$(_target) : $(_source) ;

    Depends specs@$(system.DOT_TARGET) : specs-$(_target) ;
    Depends test@$(system.DOT_TARGET) : test-$(_target) ;

    Depends $(_file) : specs-$(_target) ;

    util.set-target-variable specs-$(_target) test-$(_target) : LOADPATH : $(_source) [ util.make-path $(system.SRCDIR) : $(2) ] ;
    util.set-target-variable specs-$(_target) : ARGUMENTS : --color -fs ;

    action.invoke-ruby-specs specs-$(_target) : $(_source) ;
    action.invoke-ruby-specs test-$(_target) : $(_source) ;
  }
}

rule test-package-actions
{
  local _list = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;

  Always $(1) ;
  NotFile $(_list) ;

  action.invoke-package-test test@$(system.DOT_TARGET) : $(_list) ;

  local _file _target ;
  for _file  in $(1) {
    _target = $(_file)@$(system.DOT_TARGET) ;
    Depends $(_file) : $(_target) ;

    action.invoke-package-test $(_target) : $(system.SRCDIR)$(jam.SEPARATOR)$(_file) ;
  }
}

rule invoke-for
{
  local _target ;
  for _target in $(1) {
    system.invoke $(_target)@$(system.DOT_TARGET) : $(2) : $(3) ;
    if [ system.is-cwd-under-dot ] && $(system.MAIN_TARGET) != $(system.DOT_TARGET) {
      Depends $(_target)@$(system.MAIN_TARGET) : $(_target)@$(system.DOT_TARGET) ;
    }
  }
}

rule make-jni-module
{
  scan-for-jni $(2) ;

  local _target = $(system.BINDIR)$(jam.SEPARATOR)lib$(1).$(jam.DSO_EXTENTION) ;
  local _objects = [ system.make-objects $(2) ] ;
  local _reloc = [ system.make-reloc-object $(_target) : [ system.make-objects $(2) ] ] ;

  system.ensure-directory-for $(_target) ;
  system.propagate-proxy-settings $(_target) : $(1) ;
  system.assign-category jni : $(_target) ;

  util.add-target-variable $(_objects) : TARGET_INCLUDES :
    $(project.JAVA_HOME)$(jam.SEPARATOR)include 
    $(project.JAVA_HOME)$(jam.SEPARATOR)include$(jam.SEPARATOR)$(project.JAVA_PLATFORM) 
  ;
  local _build = [ system.make-build-target ] ;

  Depends $(_target) : $(_reloc) $(_build) ;
  action.shared-module $(_target) : $(_reloc) $(_build) ;
}

rule make-shared-module
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1).$(jam.DSO_EXTENTION) ;
  local _reloc = [ system.make-reloc-object $(_target) : [ system.make-objects $(2) ] ] ;

  system.ensure-directory-for $(_target) ;
  system.propagate-proxy-settings $(_target) : $(1) ;
  system.assign-category exe : $(_target) ;

  local _build = [ system.make-build-target ] ;

  Depends $(_target) : $(_reloc) $(_build) ;
  action.shared-module $(_target) : $(_reloc) $(_build) ;

  system.setup-try-libs-for $(_target) ;
}

rule make-swig-java
{
  system.ensure-java-home ;
  system.ensure-java-includes ;

  local _package = $(3) ;
  if ! $(_package) {
    system.error make-swig-java : Package for "$(1)" is not spefified ;
  }
  local _target = [ util.make-path $(system.BINDIR) lib$(_package).$(1).$(jam.DSO_EXTENTION) ] ;
  local _source = [ util.make-path $(system.SRCDIR) $(2) ] ;
  local _java_location  = [ util.make-path $(system.BINDIR) [ util.split $(_package) : . ] ] ;
  local _java_source  = [ util.make-path $(_java_location) $(1).java ] ;
  local _java_class  = [ util.make-path $(_java_location) $(1).class ] ;
  local _java_jar  = [ util.make-path $(system.BINDIR) $(_package).$(1).jar ] ;

  local _extension = [ util.make-path $(system.BINDIR) $(1).swig.cc ] ;
  local _object = $(_extension:S=.$(jam.OBJ_EXTENTION)) ;
  local _reloc = [ system.make-reloc-object $(_target) : $(_object) [ system.make-objects $(4) ] ] ;
  local _build = [ system.make-build-target ] ;

  system.ensure-directory-for $(_target) $(_extension) $(_java_source) ;

  system.propagate-proxy-settings $(_target) : $(1) ;
  system.mark-for-c-include-scan $(_source) ;

  system.assign-category exe : $(_target) ;
  system.assign-category gen : $(_extension) $(_java_location) ;
  system.assign-category obj : $(_object) $(_java_jar) ;

  Depends $(_target) : $(_reloc) $(_build) $(_java_jar) ;
  Depends $(_java_jar) : $(_java_class) ;
  Depends $(_java_class) : $(_java_source) $(_extension) ;
  Depends $(_object) : $(_extension) ;
  Depends $(_extension) : $(_source) $(_java_source) ;

  LINKER on $(_target) = $(LINKER) ;
  LIBDIRS on $(_target) = $(LIBDIRS) ;
  SYSLIBS on $(_target) =  $(SYSLIBS) ;
  LIBS on $(_target) =  $(LIBS) ;
  TARGET_FLAGS on $(_target) = $(4) ;
  LINKER_FLAGS on $(_target) = $(LINKER_FLAGS) ;
  DLL_FLAGS on $(_target) = $(DLL_FLAGS) ;

  util.add-target-variable $(_target) : TARGET_LIBDIRS : ;
  util.add-target-variable $(_target) : TARGET_LIBS : ;
  util.clone-target-variable $(_source) : $(_object) : TARGET_INCLUDES TARGET_DEFINES ;
  util.add-target-variable $(_object) : TARGET_INCLUDES : $(project.JAVA_INCLUDES) $(system.BINDIR) $(system.SRCDIR) ;
  util.add-target-variable $(_java_class) : BINDIR : $(system.BINDIR) ;

  util.set-target-variable $(_extension) : PACKAGE : $(_package) ;
  util.set-target-variable $(_extension) : MODULE : $(1) ;
  util.set-target-variable $(_extension) : JAVA_LOCATION : $(_java_location) ;

  action.swig-java $(_extension) : $(_source) ;
  action.compile-cc $(_object) : $(_extension) ;
  action.compile-java $(_java_class) : $(_java_source) ;
  action.jar $(_java_jar) ;

  action.shared-module $(_target) : $(_reloc) $(_build) ;
  platform.polish-dll $(_target) ;
}

rule make-swig-ruby
{
  local _target = [ util.make-path $(system.BINDIR) $(1).$(jam.DSO_EXTENTION) ] ;
  local _source = [ util.make-path $(system.SRCDIR) $(2) ] ;

  local _extension = [ util.make-path $(system.BINDIR) $(1).swig.cc ] ;
  local _object = $(_extension:S=.$(jam.OBJ_EXTENTION)) ;
  local _reloc = [ system.make-reloc-object $(_target) : $(_object) [ system.make-objects $(3) ] ] ;
  local _build = [ system.make-build-target ] ;

  system.ensure-directory-for $(_target) $(_extension) ;
  system.propagate-proxy-settings $(_target) : $(1) ;
  system.mark-for-c-include-scan $(_source) ;

  system.assign-category exe : $(_target) ;
  system.assign-category gen : $(_extension) ;
  system.assign-category obj : $(_object) ;

  Depends $(_target) : $(_reloc) $(_build) ;
  Depends $(_object) : $(_extension) ;
  Depends $(_extension) : $(_source) ;

  LINKER on $(_target) = $(LINKER) ;
  util.add-target-variable $(_target) : TARGET_LIBDIRS : $(project.RUBY_LIBDIR:E=$(project.RUBY_DIR)) ;
  util.add-target-variable $(_target) : TARGET_LIBS : $(project.RUBY_LIB) ;
  util.clone-target-variable $(_source) : $(_object) : TARGET_INCLUDES TARGET_DEFINES ;
  util.add-target-variable $(_object) : TARGET_INCLUDES : $(project.RUBY_INCLUDE:E=$(project.RUBY_DIR)) $(system.BINDIR) $(system.SRCDIR) ;

  action.swig-ruby $(_extension) : $(_source) ;
  action.compile-cc $(_object) : $(_extension) ;
  action.shared-module $(_target) : $(_reloc) $(_build) ;
}

rule make-ruby-extension
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1).$(jam.DSO_EXTENTION) ;
  local _swig_base = $(system.SRCDIR)$(jam.SEPARATOR)$(1).swig ;
  local _swig_interface = $(system.BINDIR)$(jam.SEPARATOR)$(1).swig ;
  local _swig_wrap = $(system.BINDIR)$(jam.SEPARATOR)$(1).swig.cc ;
  local _class_interfaces = $(system.SRCDIR)$(jam.SEPARATOR)$(2:S=.h) ;
  local _class_implementations = $(system.SRCDIR)$(jam.SEPARATOR)$(2:S=.cc) ;
  local _class_objects = $(system.BINDIR)$(jam.SEPARATOR)$(2:S=.o) ;
  local _extension = $(system.BINDIR)$(jam.SEPARATOR)$(1).cc ;
  local _object = $(_extension:S=.$(jam.OBJ_EXTENTION)) ;
  local _reloc = [ system.make-reloc-object $(_target) : $(_object) [ system.make-objects $(3) ] ] ;

  system.ensure-directory-for $(_target) $(_swig_interface) $(_swig_wrap) ;
  system.propagate-proxy-settings $(_target) : $(1) ;
  system.assign-category exe : $(_target) ;

  util.foreach $(_class_interfaces) $(_class_implementations) $(_swig_base) : system.mark-for-c-include-scan ;

  local _build = [ system.make-build-target ] ;
  Depends $(_target) : $(_reloc) $(_build) ;
  LINKER on $(_target) = $(LINKER) ;
  util.add-target-variable $(_target) : TARGET_LIBDIRS : $(project.RUBY_LIBDIR:E=$(project.RUBY_DIR)) ;
  util.add-target-variable $(_target) : TARGET_LIBS : $(project.RUBY_LIB) ;
  action.shared-module $(_target) : $(_reloc) $(_build) ;

  Depends $(_object) : $(_extension) ;
  Depends $(_extension) : $(_swig_wrap) $(_class_implementations) ;
  Depends $(_swig_wrap) : $(_swig_interface) $(_class_implementations) $(_class_interfaces) ;
  Depends $(_swig_interface) : $(_swig_base) $(_class_interfaces) ;

  util.set-target-variable $(_swig_interface) : CLASS_INTERFACES : $(_class_interfaces) ;
  util.add-target-variable $(_swig_wrap) : TARGET_INCLUDES : $(system.SRCDIR) ;

  action.generate-swig-interface $(_swig_interface) : $(_swig_base) ;
  action.swig-ruby $(_swig_wrap) : $(_swig_interface) ;
  action.generate-c-includes $(_extension) : $(_class_interfaces) $(_swig_wrap) $(_class_implementations) ;

  util.clone-target-variable $(_class_objects) : $(_object) : TARGET_INCLUDES TARGET_DEFINES ;
  util.clone-target-variable $(_swig_wrap) : $(_object) : TARGET_INCLUDES TARGET_DEFINES ;
  util.add-target-variable $(_object) : TARGET_INCLUDES : $(project.RUBY_INCLUDE:E=$(project.RUBY_DIR)) $(system.BINDIR) $(system.SRCDIR) ;
  action.compile-cc $(_object) : $(_extension) ;

  system.assign-category gen : $(_swig_interface) $(_swig_wrap) $(_extension) ;
  system.assign-category obj : $(_object) ;
}

rule make-library
{
  local _type = [ system.figure-library-type ] ;
  return [ make-$(_type)-library $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ] ;
}

rule make-shared-library
{
  local _target = [ system.library-target $(1) ] ;
  local _objects = [ system.make-objects $(2) ] ;
  local _type = shared ;
  local _helper_target = [ util.normalize-suffix $(1) ] ;

  NotFile $(_helper_target) ;
  Depends $(_helper_target) : $(_target) ;

  if $(project.PROHIBIT_SHARED) = true {
    _type = static ;
  }
  return [ system.make-$(_type)-library $(_target) : $(_objects) : $(3) : $(4) ] ;
}

rule make-static-library
{
  local _target = [ system.library-target $(1) ] ;
  local _objects = [ system.make-objects $(2) ] ;

  return [ system.make-static-library $(_target) : $(_objects) ] ;
}

rule make-empty-static-library
{
  local _target = [ system.library-target $(1) ] ;
  system.make-empty-static-library $(_target) ;
}

rule make-empty-library
{
  if ( [ system.figure-library-type ] = "static" ) || ( $(project.PROHIBIT_SHARED) = true ) {
    make-empty-static-library $(1) ;
  }
  else make-shared-library $(1) : : $(2) : $(3) ;
}

rule make-merged-library
{
  local _target = [ system.library-target $(1) ] ;
  local _objects = [ system.reloc-objects-for-libs $(4) : $(2) ] ;
  local _type = static ;

  if $(project.MAKE_DLL) = true {
    _type = shared ;
  }
  system.make-$(_type)-library $(_target) : $(_objects) ;
}

rule make-ant-project
{
  local _config_in_src = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;
  local _config_in_bin = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;

  system.ensure-directory-for $(_config_in_bin) ;

  Depends java : ant@$(system.DOT_TARGET) ;
  Depends java-test : test@$(system.DOT_TARGET) ;

  local _jni_libs = [ util.get-target-variable $(_config_in_bin) : JNI_LIBS ] ;
  if $(_jni_libs) { 
    Depends test@$(system.DOT_TARGET) : $(_jni_libs) ;
  }
  if [ system.is-cwd-under-dot ] && $(system.MAIN_TARGET) != $(system.DOT_TARGET) {
    Depends ant@$(system.MAIN_TARGET) : ant@$(system.DOT_TARGET) ;
    Depends test@$(system.MAIN_TARGET) : test@$(system.DOT_TARGET) ;
    Depends clean-ant@$(system.MAIN_TARGET) : clean-ant@$(system.DOT_TARGET) ;

    util.set-target-variable try : TARGET_DIRS : 
      $(system.SRCDIR) $(system.BINDIR) 
    ;
  }
  ANT_BUILD_FILE on java = $(1) ;
  LD_LIBRARY_PATH on java = [ system.convert-path-from-cwd $(LIBDIRS) : $(_config_in_bin) : TARGET_LIBDIRS ] ;
  CLASSPATH on java = [ system.convert-path-from-cwd $(CLASSPATH) : $(_config_in_bin) : TARGET_CLASSPATH ] ;

  SRCDIR on java = $(system.SRCDIR) ;
  BINDIR on java = $(system.BINDIR) ;
  BINDIR_FROM_SRCDIR on java = $(CWD)$(jam.SEPARATOR)$(system.BINDIR) ;
  GENDIR_FROM_SRCDIR on java = $(CWD)$(jam.SEPARATOR)$(system.GENDIR) ;

  system.invoke-ant ant@$(system.DOT_TARGET) : all ;
  system.invoke-ant test@$(system.DOT_TARGET) : test ;
  system.invoke-ant clean-ant@$(system.DOT_TARGET) : clean ;
}

rule generate-cc
{
  util.foreach $(1) : system.generate-cc : $(2) ;
}

rule use-local-content
{
  Depends [ system.target-for $(1) ] : [ util.make-path $(system.SRCDIR) : $(2) ] ;
}

rule use-top-content
{
  Depends [ system.target-for $(1) ] : [ util.make-path $(system.SRCTOP) : $(2) ] ;
}

rule use-project-libraries
{
  util.foreach-kind $(1) : system.use-project-libraries : include : lib : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) ;
}

rule use-c++-project-libraries
{
  util.foreach-kind $(1) : system.use-project-libraries : c++ include : c++ lib : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) ;
}

rule add-project-libraries
{
  system.add-project-libraries lib : $(1) : $(2) : $(3) ;
}

rule add-c++-project-libraries
{
  system.add-project-libraries c++ lib : $(1) : $(2) : $(3) ;
}

rule add-top-libraries
{
  system.add-project-libraries : $(1) : $(2) : $(3) ;
}

rule use-top-libraries
{
  util.foreach-kind $(1) : system.use-project-libraries : : : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) ;
}

rule ensure-system-includes
{
  util.foreach-kind $(1) : system.ensure-system-includes : : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) ;
}

rule scan-for-jni
{
  util.foreach-kind $(1) : system.scan-for-jni : $(2) ;
}

rule use-project-jni-modules
{
  util.foreach-kind $(1) : system.use-project-jni-module : $(2) ;
}

rule use-local-libraries
{
  util.foreach-kind $(1) : system.use-local-libraries : $(2) ;
}

rule use-defines
{
  util.foreach-kind $(1) : system.use-defines : $(2) ;
}

rule use-top-includes
{
  util.foreach-kind "$(1)" : system.use-top-includes : "$(2)" ;
}

rule use-project-includes
{
  # Deprecated, use 'use-top-includes' instead (only one location per
  # invocation, with directory components separated by whitespace).
  local _item ;
  for _item in "$(2:E=include)" {
    use-top-includes "$(1)" : "$(_item)" ;
  }
}

rule use-local-includes
{
  util.foreach-kind "$(1)" : system.use-local-includes : "$(2)" ;
}

rule use-product
{
  util.foreach-kind $(1) : system.use-product : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
}

rule use-oracle
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(project.ORACLE_LIBDIR:E=$(project.ORACLE_HOME)$(jam.SEPARATOR)lib)
    : $(project.ORACLE_LIBS)
    :
    : $(project.ORACLE_HOME)$(jam.SEPARATOR)$(project.ORACLE_INCLUDES)
    : $(project.ORACLE_DEFINES)
    : $(project.ORACLE_JAR)
  ;
}

rule use-pgsql 
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(PGSQL_LIBDIRS)
    : $(PGSQL_LIBS)
    :
    : $(PGSQL_INCLUDES)
    :
    : $(PGSQL_JARS) 
  ;
}

rule use-java-enterprise
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    :
    :
    :
    :
    :
    : $(jam.SEPARATOR)usr$(jam.SEPARATOR)local$(jam.SEPARATOR)j2sdkee1.2.1$(jam.SEPARATOR)lib$(jam.SEPARATOR)j2ee.jar
  ;
}

rule use-java-comm
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(project.JAVACOMM_LIBDIR)
    :
    :
    :
    :
    : $(project.JAVACOMM_JAR)
  ;
}

rule use-unit-test
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(UNITTEST_LIBDIR:E=$(UNITTEST_DIRS)$(jam.SEPARATOR)$(BUILD_ABILIB:E=lib))
    : $(UNITTEST_LIBS)
    :
    : $(UNITTEST_INCLUDE:E=$(UNITTEST_DIRS)$(jam.SEPARATOR)include)
    : $(UNITTEST_DEFINES)
    : $(UNITTEST_JARS)
    : test
  ;
}

rule use-boost
{
  use-product $(1) 
    : $(CONTRIB_ROOT)$(jam.SEPARATOR)boost-$(BOOST_VERSION)$(jam.SEPARATOR)lib
    : boost_$(2)_$(BOOST_VERSION)
    :
    : $(CONTRIB_ROOT)$(jam.SEPARATOR)boost-$(BOOST_VERSION)$(jam.SEPARATOR)include$(jam.SEPARATOR)boost-$(BOOST_VERSION)
    : $(BOOST_DEFINES)
    :
  ;
}

rule use-xml-parser
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(XERCESC_ROOT)$(jam.SEPARATOR)lib
    : $(XERCESC_LIBS)
    :
    : $(XERCESC_ROOT)$(jam.SEPARATOR)include
    : $(XMLPARSER_DEFINES)
    :
  ;
}

rule use-openssl
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(OPENSSL_ROOT)$(jam.SEPARATOR)lib
    : $(OPENSSL_LIBS)
    : 
    : $(OPENSSL_ROOT)$(jam.SEPARATOR)include
  ;
}

rule use-net-snmp
{
  if $(NETSNMP_USES_OPENSSL) = yes {
    use-openssl $(1) ;
  }
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(NETSNMP_ROOT)$(jam.SEPARATOR)lib
    : $(NETSNMP_LIBS)
    : $(project.NETSNMP_SYSLIBS)
    : $(NETSNMP_ROOT)$(jam.SEPARATOR)include$(jam.SEPARATOR)net-snmp
  ;
}

rule use-curses
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    :
    :
    : $(project.CURSES_LIBS) 
  ;
}

rule use-pthreads
{
  if $(jam.NO_PTHREAD_LIB) != "true" {
    use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
      :
      :
      : pthread
    ;
  }
}

rule use-ruby
{
  use-product $(1) $(2) $(3) $(4) $(5) $(6) $(7) $(8) $(9)
    : $(project.RUBY_LIBDIR:E=$(project.RUBY_DIR))
    : $(project.RUBY_LIB)
    :
    : $(project.INCLUDE:E=$(project.RUBY_DIR))
  ;
}

rule use-stemkit
{
  use-product $(1) 
    : $(project.STEMKIT_LIBDIR)
    : $(2)
    :
    : $(project.STEMKIT_INCLUDE)/hooks $(project.STEMKIT_INCLUDE)
    : 
    : 
  ;
}

rule generate-simple
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;
  local _source = $(system.SRCDIR)$(jam.SEPARATOR)$(2) ;

  system.ensure-directory-for $(_target) ;
  system.assign-category gen : $(_target) ;

  Depends $(_target) : $(_source) ;
  $(3) $(_target) : $(_source) ;
}

rule uudecode
{
  generate-simple $(1) : $(2) : action.uudecode ;
}

