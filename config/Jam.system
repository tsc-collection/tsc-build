# vim:ft=jam
#
#            Tone Software Corporation BSD License ("License")
# 
#                        Software Build Environment
#                        
# Please read this License carefully before downloading this software. By
# downloading or using this software, you are agreeing to be bound by the
# terms of this License. If you do not or cannot agree to the terms of
# this License, please do not download or use the software.
# 
# A set of Jam configuration files and a Jam front-end for advanced
# software building with automatic dependency checking for the whole
# project. Provides a hierarchical project description while performing
# build procedures without changing directories. The resulting domain
# language changes emphasis from how to build to what to build. Provides
# separation of compilation artifacts (object files, binaries,
# intermediate files) from the original sources. Comes standard with
# ability to build programs, test suites, static and shared libraries,
# shared modules, code generation, and many others. Provides the bridge to
# ANT for building Java, with abilities to build JNI libraries.
# 
# Copyright (c) 2003, 2005, Tone Software Corporation
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#   * Neither the name of the Tone Software Corporation nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

rule system.error
{
  echo ERROR in $(core.LAST_LOADED_FILE) ;
  exit $(1): $(2) ;
}

rule system.error-no-rule
{
  system.error $(1) : Rule is not implemented yet ;
}

rule system.is-cwd-under
{
  if ! [ util.consume $(<) : $(core.CWD_FROM_TOP) ] {
    return true ;
  }
}

rule system.is-cwd-under-dot
{
  return [ system.is-cwd-under $(system.DOT) ] ;
}

rule system.setup-jamshell-inline
{
  JAMSHELL = $(RUBY) -W0 -e "$:.concat ENV['PATH'].split(File::PATH_SEPARATOR); require 'tsc/application'; TSC::Application.new.start { require 'fileutils'; include FileUtils; eval ARGV.first }" % ;
}

rule system.setup-jamshell-file
{
  JAMSHELL = $(RUBY) -W0 -r fileutils -e 'include FileUtils; load ARGV.first' % ;
}

rule system.setup-artifact-offsets
{
  if $(2) {
    system.ARTIFACT_OFFSETS = $(2) ;
  }
  system.ARTIFACT_OFFSETS = $(1) $(system.ARTIFACT_OFFSETS) $(3) ;
  system.setup-top-dirs ;
}

rule system.setup-top-dirs
{
  system.SRCTOP = $(core.TOP) src $(core.PROJECT_OFFSET) ; 
  system.BINTOP = $(core.TOP) bin $(system.ARTIFACT_OFFSETS) $(core.PROJECT_OFFSET) ;
  system.PKGTOP = $(core.TOP) pkg $(system.ARTIFACT_OFFSETS) $(core.PROJECT_OFFSET) ;
  system.GENTOP = $(core.TOP) gen $(system.ARTIFACT_OFFSETS) $(core.PROJECT_OFFSET) ;
  system.RUNTOP = $(core.TOP) run $(system.ARTIFACT_OFFSETS) $(core.PROJECT_OFFSET) ;

  core.TOPDIR = $(core.TOP:J=$(jam.SEPARATOR))$(jam.SEPARATOR) ;

  local _item ;
  for _item in SRC BIN PKG GEN RUN {
    system.$(_item)TOPDIR = [ util.make-path $(system.$(_item)TOP) ] ;

    # Deprecated compatibility settings
    $(_item)TOP = $(system.$(_item)TOP) ;
    $(_item)TOPDIR = $(system.$(_item)TOPDIR) ;
  }
}

rule system.load-top-jamfile
{
  core.trace system : system.load-top-jamfile ;

  if $(JAMTOP) = . {
    JAMTOP = $(core.CWD_FROM_TOP) ;
  }
  system.load-jamfile-from $(JAMTOP:E=src) ;

  if [ Glob . : $(JAMFILE) ] {
    if $(system.CWD_SRCDIR) {
      on $(system.CWD_SRCDIR) if $(system.DIRECTORY_LOADED) != true {
        if ! $(JAMTOP) {
          exit "Current $(JAMFILE) is not part of the build process" ;
        }
        if [ system.is-cwd-under $(JAMTOP) ] {
          system.load-jamfile-from $(core.CWD_FROM_TOP) ;
        }
      }
    }
  }
}

rule system.load-jamfile-from
{
  local system.PARENT_DOT_TARGET = $(system.DOT_TARGET) ;
  local system.DOT = $(system.DOT) $(<) ;

  local system.SRCDIR = [ util.make-path $(core.TOP) $(system.DOT) ] ;
  local system.BINDIR = [ util.make-path $(core.TOP) bin $(system.ARTIFACT_OFFSETS) $(system.DOT[2-]) ] ;
  local system.GENDIR = [ util.make-path $(core.TOP) gen $(system.ARTIFACT_OFFSETS) $(system.DOT[2-]) ] ;
  local system.DOT_TARGET = $(system.DOT:J=$(jam.SEPARATOR)) ;

  NotFile $(system.DOT_TARGET) $(system.CWD_SUBDIR_TARGETS)@$(system.DOT_TARGET) ;
  Always $(system.DOT_TARGET) $(system.CWD_SUBDIR_TARGETS)@$(system.DOT_TARGET) ;

  Depends $(system.DOT_TARGET) : all@$(system.DOT_TARGET) ;
  local _target ;
  for _target in $(system.CWD_SUBDIR_TARGETS) {
    Depends $(_target)@$(system.PARENT_DOT_TARGET) : $(_target)@$(system.DOT_TARGET) ;
  }
  on $(system.SRCDIR) if $(system.DIRECTORY_LOADED) != true {
    core.load $(system.SRCDIR)$(jam.SEPARATOR)$(JAMFILE) : $(>) ;
    system.DIRECTORY_LOADED on $(system.SRCDIR) = true ;
  }
}

rule system.setup-environment
{
  core.trace system : system.setup-environment ;

  system.CWD_SRCDIR = [ util.make-path $(core.TOP) $(core.CWD_FROM_TOP) ] ;
  system.CWD_BINDIR = [ util.make-path $(system.BINTOP) $(core.CWD_FROM_TOP[2-]) ] ;
  system.CWD_GENDIR = [ util.make-path $(system.GENTOP) $(core.CWD_FROM_TOP[2-]) ] ;

  system.TOP_TARGET = top ;
  system.MAIN_TARGET = $(core.CWD_FROM_TOP:J=$(jam.SEPARATOR):E=$(system.TOP_TARGET)) ;
  system.DOT_TARGET = $(system.TOP_TARGET) ;

  system.TARGET_CATEGORIES = exe jni test specs lib obj gen proto ant reloc ;

  system.CWD_SUBDIR_TARGETS = $(system.TARGET_CATEGORIES) clean-$(system.TARGET_CATEGORIES) ;
  system.CWD_NOT_SUBDIR_TARGETS = run try-libs ;

  Depends all : exe lib gen jni ant ;
  Depends clean : clean-$(system.TARGET_CATEGORIES) ;

  Depends top : exe@top lib@top gen@top jni@top ant@top ;
  Depends top-clean : clean-$(system.TARGET_CATEGORIES)@top ;

  Depends java : ant@top ;
  Depends java-clean : clean-ant@top ;

  NotFile 
    all clean
    top top-clean
    java java-clean
    try package release handoff
    $(system.CWD_SUBDIR_TARGETS) 
    $(system.CWD_NOT_SUBDIR_TARGETS) 
  ;
  Always 
    run $(system.TARGET_CATEGORIES)
    java java-clean 
    try try-libs package release handoff 
    clean top-clean clean-$(system.TARGET_CATEGORIES) 
  ;
  local _cwd_targets = $(system.CWD_SUBDIR_TARGETS) $(system.CWD_NOT_SUBDIR_TARGETS) ;
  NotFile $(system.MAIN_TARGET) $(_cwd_targets)@$(system.MAIN_TARGET) ;
  Always $(system.MAIN_TARGET) $(_cwd_targets)@$(system.MAIN_TARGET) ;

  local _target ;
  for _target in $(_cwd_targets) {
    Depends $(_target) : $(_target)@$(system.MAIN_TARGET) ;
  }
  Depends try : all ;

  if $(jam.NO_PACKAGE_DEPEND) != true {
    Depends package : top ;
  }
  Depends release : test@top package ;
  Depends handoff : release ;

  setup-direct-clean-target bin : $(system.CWD_BINDIR) ;
  setup-direct-clean-target gen : $(system.CWD_GENDIR) ;
  setup-direct-clean-target pkg : $(system.PKGTOPDIR) ;

  util.set-target-variable try : TARGET_DIRS : 
    $(system.CWD_SRCDIR) $(system.CWD_BINDIR) 
  ;
  action.install try ;
  system.make-package package ;
  action.handoff handoff ;
}

rule system.make-package
{
  action.package $(1) ;
}

rule setup-direct-clean-target
{
  local _clean_target = "directory $(2)" ;

  NotFile $(1)clean $(_clean_target) ;
  Always  $(1)clean $(_clean_target) ;
  Depends $(1)clean : $(_clean_target) ;

  action.remove $(_clean_target) : $(2)  ;
}

rule system.project-lib-name
{
  return [ util.join $(project.LIB_PREFIX) $(1:D=) ] ;
}

rule system.project-lib-dir
{
  return $(system.BINTOP) $(1) [ util.split $(2) : . ] ;
}

rule system.project-include-dir
{
  return $(system.SRCTOP) $(2) [ util.split $(1) : . ] ;
}

rule system.project-jni-dir
{
  return $(system.BINTOP) jni $(1) ;
}

rule system.project-jni-target
{
  return [ util.join lib $(1) . $(jam.DSO_EXTENTION) ] ;
}

rule system.project-jni-target-path
{
  return [ util.make-path [ system.project-jni-dir $(1) ] [ system.project-jni-target $(1) ] ] ;
}

rule system.project-lib-target
{
  return [ util.join $(jam.LIB_PREFIX) [ system.project-lib-name $(1) ] .$(jam.LIB_EXTENTION) ] ;
}

rule system.project-lib-target-path
{
  return [ util.make-path [ system.project-lib-dir $(1) : $(2) ] [ system.project-lib-target $(2) ] ] ;
}

rule system.assign-category
{
  Depends $(1)@$(system.DOT_TARGET) : $(2) ;

  local _clean_target = "$(1) in $(system.BINDIR)" ;

  NotFile $(_clean_target) ;
  Always $(_clean_target) ;
  Depends clean-$(1)@$(system.DOT_TARGET) : $(_clean_target) ;
  action.remove $(_clean_target) : $(2) ;
}

rule system.associate-binary-targets 
{
  system.associate $(system.BINDIR)$(jam.SEPARATOR)$(1) : $(system.BINDIR)$(jam.SEPARATOR)$(2) ;
}

rule system.associate
{
  local _target = $(1[1]) ;
  local _source = $(2[1]) ;

  NotFile $(_source) ;
  Depends $(_target) : $(_source) ;

  util.clone-target-variable $(_source) : $(_target) : 
    TARGET_LIBDIRS TARGET_LIBDIRS_I TARGET_LIBS TARGET_SYSLIBS TARGET_STATIC_LIBS 
  ;
}

rule system.make-empty-static-library
{
  local _library = $(1) ;
  local _object = $(1).$(jam.OBJ_EXTENTION) ;
  local _source = $(1).c ;

  Depends $(_library) : $(_object) ;
  Depends $(_object) : $(_source) ;

  system.assign-category gen : $(_source) ;
  system.assign-category obj : $(_object) ;
  system.assign-category lib : $(_library) ;

  system.ensure-directory-for $(_source) ;

  action.empty-c-source $(_source) ;
  action.compile-c $(_object) : $(_source) ;

  action.static-library $(_library) : $(_object) ;
}

rule system.make-shared-library
{
  local _lib_target = [ system.project-lib-target $(1) ] ;
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(_lib_target) ;

  local _target_so = $(_target:S=.$(jam.DSO_EXTENTION)) ;
  local _target_so_major = $(_target_so).$(project.LIB_MAJOR:E=0) ;
  local _target_export = $(_target:S=.exp) ;

  if $(project.DO_NOT_USE_LIBRARY_MAJOR) = true {
    _target_so_major = $(_target_so) ;
  }
  else system.make-in-directory-symlink $(_target_so) : $(_target_so_major) ;

  local _reloc = [ system.make-reloc-object $(_target) : $(2) ] ;

  system.associate-binary-targets $(_target_so_major:D=) : $(1) ;
  system.associate-binary-targets $(_target:D=) : $(1) ;

  system.ensure-directory-for $(_target) ;
  system.assign-category lib : $(_target) $(_target_so) $(_target_so_major) ;
  system.assign-category gen : $(_target_export) ;

  Depends $(_target_export) : $(_target_so) ;
  Depends $(_target) : $(_target_export) ;

  LIBRARY_EXPORTS on $(_target) = $(_target_export) ;
  action.shared-library-exports $(_target_export) : $(_target_so) ;
  action.import-library $(_target) : $(_target_so) ;

  if $(3) {
    _lib_target = [ system.project-lib-target $(3) ] ;
    local _target_soname = $(system.BINDIR)$(jam.SEPARATOR)$(_lib_target:S=.$(jam.DSO_EXTENTION))$(_target_so_major:S) ;
    
    Depends $(_target) : $(_target_soname) ;
    system.make-in-directory-symlink  $(_target_soname) : $(_target_so_major) ;
    system.assign-category lib : $(_target_soname) ;

    util.set-target-variable $(_target_so_major) : TARGET_SONAME : $(_target_soname:D=) ;
  }
  else util.set-target-variable $(_target_so_major) : TARGET_SONAME : $(_target_so_major:D=) ;

  local _build = [ system.make-build-target ] ;
  Depends $(_target_so_major) : $(_reloc) $(_build) ;

  util.clone-target-variable $(1) : $(_target_so_major) : MERGE ;
  TARGET_IMPLIB on $(_target_so_major) = $(_target) ;
  EXTRA_OBJECTS on $(_target_so_major) = $(_build) ;
  TARGET_OBJECTS on $(_target_so_major) = $(_reloc) ;

  LIBDIRS on $(_target_so_major) = $(LIBDIRS) ;
  SYSLIBS on $(_target_so_major) =  $(SYSLIBS) ;
  LIBS on $(_target_so_major) =  $(LIBS) ;
  TARGET_FLAGS on $(_target_so_major) = $(4) ;
  LINKER_FLAGS on $(_target_so_major) = $(LINKER_FLAGS) ;
  LINKER on $(_target_so_major) = $(LINKER) ;

  action.shared-library $(_target_so_major) ;
  action.polish-dll $(_target) ;

  return $(_target_so_major) ;
}

rule system.make-static-library
{
  local _lib_target = [ system.project-lib-target $(1) ] ;
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(_lib_target) ;

  system.make-reloc-object $(_target) : $(2) ;

  system.associate-binary-targets $(_target:D=) : $(1) ;
  system.ensure-directory-for $(_target) ;
  system.assign-category lib : $(_target) ;

  Depends $(_target) : $(2) ;

  util.clone-target-variable $(1) : $(_target) : MERGE ;
  action.static-library $(_target) : $(2) ;
  action.ranlib $(_target) ;

  CLEANUP_LIST on $(_target) =  $(_target:S=.$(jam.DSO_EXTENTION)) $(_target:S=.$(jam.DSO_EXTENTION).*) ;
  action.cleanup-for $(_target) ;
}

rule system.make-in-directory-symlink
{
  Depends $(<) : $(>) ;
  local _destination = $(>:D=) ;
  NotFile $(_destination) ;
  action.symlink $(<) : $(_destination) ;
}

rule system.reloc-object-name
{
  return $(1).reloc.$(jam.OBJ_EXTENTION) ;
}

rule system.reloc-objects-for-libs
{
  local _result _item ;
  for _item in $(2) {
    local _components = [ util.reverse-split $(_item) : $(jam.SEPARATOR) ] ;
    _result += [ system.reloc-object-name [ system.project-lib-target-path $(1) [ util.reverse $(_components[2-]) ] : $(_components[1]) ] ] ;
  }
  return $(_result) ;
}

rule system.make-reloc-object
{
  local _reloc = [ system.reloc-object-name $(1) ] ;

  system.assign-category reloc : $(_reloc) ;
  local _static_libs = [ util.get-target-variable $(1) : TARGET_STATIC_LIBS ] ;

  Depends $(1) : $(_reloc) ;
  Depends $(_reloc) : $(2) $(_static_libs) ;

  CONTENT on $(_reloc) = [ util.trim-path $(core.TOP) : $(2) $(_static_libs) ] ;
  system.ensure-directory-for $(_reloc) ;
  action.reloc $(_reloc) ;

  return $(2) ;
}

rule system.make-build-target
{
  if ! $(PRODUCT_BUILD) {
    return ;
  }
  local _object = [ util.make-path $(system.BINTOP) build.$(jam.OBJ_EXTENTION) ] ;
  local _source = [ util.make-path $(system.BINTOP) build.$(PRODUCT_BUILD).c ] ;

  Depends $(_object) : $(_source) ;

  action.generate-build-file $(_source) : $(_object) ;
  action.compile-c $(_object) : $(_source) ;
  return $(_object) ;
}

rule system.make-program
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;

  if $(jam.EXE_EXTENTION) {
    _target_with_extention = $(_target).$(jam.EXE_EXTENTION) ;
    system.associate $(_target_with_extention) : $(_target) ;

    _target = $(_target_with_extention) ;
  }

  local _reloc = [ system.make-reloc-object $(_target) : [ system.make-objects $(2) ] ] ;

  system.ensure-directory-for $(_target) ;
  system.assign-category exe : $(_target) ;

  local _build = [ system.make-build-target ] ;

  Depends $(_target) : $(_reloc) $(_build) ;
  TARGET_OBJECTS on $(_target) = $(_reloc) ;
  EXTRA_OBJECTS on $(_target) = $(_build) ;

  LIBDIRS on $(_target) = $(LIBDIRS) ;
  SYSLIBS on $(_target) =  $(SYSLIBS) ;
  STATIC_LIBS on $(_target) =  $(STATIC_LIBS) ;
  LIBS on $(_target) =  $(LIBS) ;
  LINKER on $(_target) = $(LINKER) ;
  LINKER_FLAGS on $(_target) = $(LINKER_FLAGS) ;
  EXE_LINKER_FLAGS on $(_target) = $(EXE_LINKER_FLAGS) ;

  if $(3) {
    TARGET_FLAGS on $(_target) += $(3) ;
  }
  local _options = [ util.get-target-variable $(_target) : TARGET_OPTIONS ] ;
  if $(_options) {
    local _item ;
    for _item in [ util.combinations $(_options) ] {
      NotFile $(_item) ;
      action.link $(_target) : $(_item) ;
    }
  }
  else action.link $(_target) ;
  action.polish-program $(_target) ;

  return $(_target) ;
}

rule system.make-objects
{
  local _object_list _object ;
  for _object in $(1) {
    _object_list += [ system.make-single-object $(_object) ] ;
  }
  system.setup-object-targets-in-cwd $(_object_list) ;
  system.assign-category obj : $(_object_list) ;
  return $(_object_list) ;
}

rule system.setup-object-targets-in-cwd
{
  if $(system.SRCDIR) = $(system.CWD_SRCDIR) {
    local _target _name ;
    for _target in $(1) {
      _name = $(_target:D=) ;
      NotFile $(_name) ;
      Depends $(_name) : $(_target) ;
    }
  }
}

rule system.setup-program-targets-in-cwd
{
  if $(system.SRCDIR) = $(system.CWD_SRCDIR) {
    for _target in $(1) {
      local _name = $(_target:D=) ;
      NotFile $(_name) ldpath@$(_name) ;
      Always $(_name) ldpath@$(_name) ;
      Depends $(_name) : $(_target) ;

      system.invoke $(_name) : $(_target) ;
      system.print-library-path ldpath@$(_name) : $(_target) ;
    }
  }
}

rule system.make-single-object
{
  local _kind = $(1:S) ;
  local _source = [ util.make-path $(system.SRCDIR) $(1) ] ;

  if ! $(_kind) {
    exit Cannot determine compilation mode for $(_source) (no extention) ;
  }
  local _target = [ system.target-for$(_kind) $(1) ] ;
  system.ensure-directory-for $(_target) ;

  Depends $(_target) : $(_source) ;
  system.process-object$(_kind) $(_target) : $(_source) ;

  util.clone-target-variable $(_target) : $(_source) : TARGET_INCLUDES ;
  util.add-target-variable $(_target) : TARGET_INCLUDES : $(system.SRCDIR) ;

  util.set-target-variable $(_target) : INCLUDES : "$(INCLUDES)" ;
  util.set-target-variable $(_target) : DEFINES : $(DEFINES) ;

  return $(_target) ;
}

rule system.generate-cc
{
  local _name = system.generate-cc ;
  local _processor = [ util.join $(_name) $(1:S) ] ;

  if $(_processor) = $(_name) {
    exit Cannot determine generation processor for '$(1)' (no extention) ;
  }
  local _original = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;
  local _original_cc = $(system.SRCDIR)$(jam.SEPARATOR)$(1:S=.cc) ;

  local _generated_cc = $(system.BINDIR)$(jam.SEPARATOR)$(1).cc ;
  local _final_o = $(system.BINDIR)$(jam.SEPARATOR)$(1:S=.$(jam.OBJ_EXTENTION)) ;
  local _merged_cc = $(system.BINDIR)$(jam.SEPARATOR)$(1:S=.cc) ;

  system.ensure-directory-for $(_generated_cc) ;
  system.assign-category gen : $(_generated_cc) $(_merged_cc) ;

  Depends $(_generated_cc) : $(_original) $(system.SRCDIR)$(jam.SEPARATOR)$(2) ;
  Depends $(_merged_cc) : $(_generated_cc) $(_original_cc) ;
  Depends $(_final_o) : $(_merged_cc) ;

  NoCare $(_original_cc) ;

  util.set-target-variable $(_final_o) : TARGET_BINARY_SOURCE : $(_merged_cc) ;
  util.set-target-variable $(_merged_cc) : GENERATED_CODE_LIST_MAIN : $(_original_cc) ;
  util.add-target-variable $(_merged_cc) : GENERATED_CODE_LIST : $(_generated_cc) ;

  system.mark-for-c-include-scan $(_original) ;

  $(_processor) $(_generated_cc) : $(_original) ;
  action.merge-generated-code $(_merged_cc) ;
}

rule system.generate-cc.l
{
  FLEX_SKELETON on $(1) = [ util.make-path $(system.SRCTOP) lib yacc++ skeleton.flex ] ;
  CLASS_NAME on $(1) = $(2:D=:B) ;
  action.generate-cc-lex $(1) : $(2) ;
}

rule system.generate-cc.y
{
  CLASS_NAME on $(1) = $(2:D=:B) ;
  action.generate-cc-yacc $(1) : $(2) ;
}

rule system.generate-cc.rcc
{
  action.generate-cc-eruby $(1) : $(2) ;
}

rule system.generate-cc.pc
{
  local _target = $(1:S=) ;
  local _includes ;

  on $(_target:S=.$(jam.OBJ_EXTENTION)) _includes = $(TARGET_INCLUDES) ;
  _includes += $(INCLUDES) ;

  ORACLE_HOME on $(1) = $(project.ORACLE_HOME) ;
  PROCC_INCLUDES on $(1) = sys_include='($(PROCC_SYSINCLUDES:J=,))' INCLUDE='($(_includes:J=,))' ;

  action.generate-cc-proc $(1) : $(2) ;
}

rule system.ensure-directory-for
{
  local _target ;
  for _target in $(1) {
    local _target_directories = $(_target:D) $(2) ;

    Depends $(_target) : $(_target_directories) ;
    NoUpdate $(_target_directories) ;
    action.make-directory $(_target_directories) ;
  }
}

rule system.target-for.c
{
  return [ util.make-path $(system.BINDIR) $(1:D=:S=.$(jam.OBJ_EXTENTION)) ] ;
}

rule system.target-for.swig
{
  return [ util.make-path $(system.BINDIR) $(1:D=).cc ] ;
}

rule system.target-for.cc
{
  return [ system.target-for.c $(1) ] ;
}

rule system.target-for.cpp
{
  return [ system.target-for.cc $(1) ] ;
}

rule system.process-object.c
{
  util.set-target-variable $(1) : CC_FLAGS : "$(CC_FLAGS)" ;

  system.mark-for-c-include-scan $(2) ;
  action.compile-c $(1) : $(2) ;
}

rule system.process-object.cc
{
  util.set-target-variable $(1) : CXX_FLAGS : "$(CXX_FLAGS)" ;

  system.mark-for-c-include-scan $(2) ;
  action.compile-cc $(1) : $(2) ;
}

rule system.process-object.cpp
{
  system.process-object.cc $(1) : $(2) : $(3) ;
}

rule system.target-for.rc
{
  return [ util.make-path $(system.BINDIR) $(1:S=.$(jam.RES_EXTENTION)) ] ;
}

rule system.process-object.rc
{
  system.mark-for-c-include-scan $(2) ;
  action.compile-resource $(1) : $(2) ;
}

rule system.mark-for-c-include-scan
{
  local _file = $(1[1]) ;
  HDRSCAN on $(_file) = $(CHDRPATTERN) ;
  on $(_file) if ! $(HDRRULE)  {
    HDRRULE on $(_file) = system.process-header ;
  }
}

rule system.process-header 
{
  local _includes = $(1:D) $(INCLUDES) [ util.get-target-variable $(1) : TARGET_INCLUDES ] ;
  local _headers ;
  local _item ;
  for _item in $(_includes)$(jam.SEPARATOR)$(2) {
    if ! [ util.is-absolute-path $(_item) ] {
      _item = [ util.split $(_item) : "/\\" ] ;
      _item = $(_item:J=$(jam.SEPARATOR)) ;

      on $(_item) if ! $(HEADER_PROCESSED) {
        util.clone-target-variable $(1) : $(_item) : HDRRULE HDRSCAN TARGET_INCLUDES ;
        HEADER_PROCESSED on $(_item) = true ;
      }
      _headers += $(_item) ;
    }
  }
  NoCare $(_headers) ;
  Includes $(1) : $(_headers) ;
}

rule system.process-header-jni
{
  if ! [ util.get-target-variable java : SRCDIR ] {
    system.error system.process-header-jni : Java project is not set up so far. ;
  }
  system.process-header $(1) : $(2) ;

  local _object = [ util.get-target-variable $(1) : OBJECT ] ;
  util.add-target-variable $(_object) : TARGET_INCLUDES :
    [ util.get-target-variable java : BINDIR ]
  ;
  local _item ;
  for _item in $(2) {
    if $(_item:D) = jni {
      local _class = [ util.split $(_item:B) : _ ] ;

      local _bindir = [ util.get-target-variable java : BINDIR ] ;
      local _srcdir = [ util.get-target-variable java : SRCDIR ] ;

      local _class_spec = $(_class:J=.) ;
      local _class_header = [ util.make-path $(_bindir) jni $(_class:J=_).h ] ;
      local _class_class = [ util.make-path $(_bindir) $(_class:J=$(jam.SEPARATOR)).class ] ;
      local _class_source = [ util.make-path $(_srcdir) $(_class:J=$(jam.SEPARATOR)).java ] ;

      Includes $(1) : $(_class_header) ;
      NotFile $(_class_spec) ;

      util.clone-target-variable java : $(_class_header) : BINDIR ;
      system.assign-category gen : $(_class_header) ;
      action.create-jni-header $(_class_header) : $(_class_spec) ;

      Depends $(_class_header) : $(_class_class) ;
      Depends $(_class_class) : $(_class_source) ;

      system.invoke-ant $(_class_class) : compile ;
    }
  }
}

rule system.scan-for-jni.c
{
  local _source = $(system.SRCDIR)$(jam.SEPARATOR)$(1) ;

  HDRRULE on $(_soruce) = system.process-header-jni ;
  OBJECT on $(_soruce) = [ target-for.c $(1) ] ;
}

rule system.scan-for-jni.cc
{
  system.scan-for-jni.c $(1) ;
}

rule system.scan-for-jni.cpp
{
  system.scan-for-jni.c $(1) ;
}

rule system.use-project-libraries
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;
  local _offset = $(3) ;
  
  _offset ?= $(2) ;

  if $(4) {
    system.setup-project-libraries $(_target) : $(_offset) : : $(4) ;
  }
  local _parameter _option _suffix ;
  for _parameter in 5 6 7 8 9 {
    _option = $($(_parameter)) ;
    if ! $(_option) {
      break ;
    }
    TARGET_OPTIONS on $(_target) += I ;
    on $(_target) _suffix = $(TARGET_OPTIONS) ;
    system.setup-project-libraries $(_target) : $(_offset) : $(_suffix:J=) : $(_option) ;
  }
}

rule system.setup-project-libraries
{
  local _v _v_LIBS _v_SYSLIBS _v_LIBDIRS _v_STATIC_LIBS ;
  for _v in LIBS SYSLIBS LIBDIRS STATIC_LIBS {
    _v_$(_v) = [ util.join TARGET $(_v) $(3) : _ ] ;
  }
  local _item _library _libdirs _libs _syslibs ;
  for _item in $(4) {
    _library = [ system.project-lib-target-path $(2) : $(_item) ] ;

    _libdirs = [ util.get-target-variable $(_library) : TARGET_LIBDIRS ] ;
    _libs = [ util.get-target-variable $(_library) : TARGET_LIBS ] ;
    _syslibs = [ util.get-target-variable $(_library) : TARGET_SYSLIBS ] ;
    
    util.add-target-variable $(1) : $(_v_LIBS) : [ system.project-lib-name $(_item) ] $(_libs) ;
    util.add-target-variable $(1) : $(_v_SYSLIBS) : $(_syslibs) ;
    util.add-target-variable $(1) : $(_v_STATIC_LIBS) : $(_library) ;
    util.add-target-variable $(1) : $(_v_LIBDIRS) : $(_library:D) $(_libdirs) ;

    Depends $(1) : $(_library) ;
  }
}

rule system.use-project-libraries.c
{
  local _target = [ system.target-for.c $(1) ] ;
  local _offset = $(2) ;

  _offset ?= $(3) ;

  local _item ;
  for _item in $(4) {
    util.add-target-variable $(_target) : TARGET_INCLUDES : [ util.make-path [ system.project-include-dir $(_item) : $(_offset) ] ] ;
  }
}

rule system.use-project-libraries.cc
{
  system.use-project-libraries.c $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
}

rule system.use-project-libraries.cpp
{
  system.use-project-libraries.c $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
}

rule system.use-project-libraries.xml
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;
  local _item _library ;
  for _item in $(4) {
    _library = [ system.project-lib-target-path $(3) : $(_item) ] ;
    util.add-target-variable $(_target) : TARGET_LIBDIRS : $(_library:D) ;
    Depends $(_target) : $(_library) ;
  }
}

rule system.use-project-jni-module.xml
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;
  local _item ;
  for _item in $(2) {
    local _module = [ system.project-jni-target-path $(_item) ] ;
    util.add-target-variable $(_target) : TARGET_LIBDIRS : $(_module:D) ;

    util.add-target-variable $(_target) : JNI_LIBS : $(_module) ;
    util.add-target-variable $(_target) : TARGET_LIBDIRS :
      [ util.get-target-variable $(_module) : TARGET_LIBDIRS ]
    ;
  }
}

rule system.use-local-libraries
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;
  local _item _lib_target _library ;
  for _item in $(2) {
    _lib_target = [ system.project-lib-target $(_item:B) ] ;
    _library = [ util.normalize-path $(system.BINDIR)$(jam.SEPARATOR)$(_item)$(jam.SEPARATOR)$(_lib_target) ] ;

    util.add-target-variable $(_target) : TARGET_LIBDIRS : $(_library:D) ;
    util.add-target-variable $(_target) : TARGET_STATIC_LIBS : $(_library) ;
    util.add-target-variable $(_target) : TARGET_LIBS : [ system.project-lib-name $(_item:B) ]  ;

    Depends $(_target) : $(_library) ;
  }
}

rule system.use-local-libraries.cc
{
  util.add-target-variable $(system.BINDIR)$(jam.SEPARATOR)$(1:S=.$(jam.OBJ_EXTENTION)) : TARGET_INCLUDES : $(system.SRCDIR)$(jam.SEPARATOR)$(2) ;
}

rule system.ensure-system-includes.c
{
  util.add-target-variable $(system.BINDIR)$(jam.SEPARATOR)$(1:S=.$(jam.OBJ_EXTENTION)) : INCLUDES : $(jam.SEPARATOR)usr$(jam.SEPARATOR)include $(INCLUDES) ;
}

rule system.ensure-system-includes.cc
{
  system.ensure-system-includes.c $(1) ;
}

rule system.ensure-system-includes.cpp
{
  system.ensure-system-includes.c $(1) ;
}

rule system.use-product
{
  local _target = $(system.BINDIR)$(jam.SEPARATOR)$(1) ;

  util.add-target-variable $(_target) : TARGET_LIBDIRS : $(2) ;
  util.add-target-variable $(_target) : TARGET_LIBS : $(3) ;
  util.add-target-variable $(_target) : TARGET_SYSLIBS : $(4) ;

  if $(8) {
    system.assign-category $(8) : $(_target) ;
  }
}

rule system.use-product.cc
{
  system.use-product.c $(1) : : : : $(5) : $(6) : $(7) : $(8) : $(9) ;
}

rule system.use-product.cpp
{
  system.use-product.cc $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
}

rule system.use-product.swig
{
  local _target = [ system.target-for.swig $(1) ] ;

  util.add-target-variable $(_target) : TARGET_INCLUDES : $(5) ;
  util.add-target-variable $(_target) : TARGET_DEFINES : $(6) ;

  if $(8) {
    system.assign-category $(8) : $(_target) ;
  }
}

rule system.use-product.c
{
  local _target = [ system.target-for.c $(1) ] ;

  util.add-target-variable $(_target) : TARGET_INCLUDES : $(5) ;
  util.add-target-variable $(_target) : TARGET_DEFINES : $(6) ;

  if $(8) {
    system.assign-category $(8) : $(_target) ;
  }
}

rule system.use-product.xml
{
  util.add-target-variable $(system.BINDIR)$(jam.SEPARATOR)$(1) : TARGET_CLASSPATH : $(7) ;
}

rule system.use-defines.cc
{
  system.use-defines.c $(1) : $(2) ;
}

rule system.use-defines.cpp
{
  system.use-defines.c $(1) : $(2) ;
}

rule system.use-defines.c
{
  local _target = [ system.target-for.c $(1) ] ;
  util.add-target-variable $(_target) : TARGET_DEFINES : $(2) ;
}

rule system.use-top-includes.cc
{
  system.use-top-includes.c "$(1)" : "$(2)" ;
}

rule system.use-top-includes.cpp
{
  system.use-top-includes.c "$(1)" : "$(2)" ;
}

rule system.use-top-includes.c
{
  local _offset = "$(2)" ;
  util.add-target-variable [ system.target-for.c "$(1)" ] : TARGET_INCLUDES : 
    [ util.make-path "$(system.GENTOP)" $(_offset) ] 
    [ util.make-path "$(system.SRCTOP)" $(_offset) ] 
  ;
}

rule system.use-local-includes.cc
{
  system.use-local-includes.c $(1) : $(2) ;
}

rule system.use-local-includes.cpp
{
  system.use-local-includes.c $(1) : $(2) ;
}

rule system.use-local-includes.c
{
  util.add-target-variable [ system.target-for.c "$(1)" ] : TARGET_INCLUDES : [ util.make-path "$(system.SRCDIR)" $(2) ] ;
}

# Rule system.invoke prepares program execution. It sets up the environment
# so that the current directory for the invocation is the binary directory
# corresponding to that of where the program's Jamfile is located. This way 
# the program may open termporary files right in the current directory.
# For opening source files (e.g. config files) from the guaranteed location,
# environment variable JAM_SRCDIR willl be setup, as well as whatever is
# passed a fourth parameter will be converted to the absolute path an passed
# as an argument to the launched program (unit tests are invoked this way).
# 
# To make it possible, the rule sets up LD_LIBRARY_PATH and the program
# invocation path relative to the program's Jamfile location.
# 
rule system.invoke
{
  Depends $(1) : $(2) ;

  LD_LIBRARY_PATH-$(2) on $(1) = [ system.convert-path-from-cwd $(LIBDIRS) : $(2) : TARGET_LIBDIRS ] ;
  COMMAND-$(2) on $(1) = $(core.CWD)$(jam.SEPARATOR)$(2) ;

  ARGS-$(2) on $(1) = $(3) ;

  if $(4) {
    ARGS-$(2) on $(1) += [ system.convert-path-from-cwd $(4) ] ;
  }
  SRCDIR on $(1) = [ system.convert-path-from-cwd $(system.SRCDIR) ] ;
  BINDIR on $(1) = $(system.BINDIR) ;

  action.invoke $(1) : $(2) ;
}

rule system.convert-path-from-cwd
{
  local _libdirs = $(1) ;

  if $(2) {
    _libdirs += [ util.get-target-variable $(2) : $(3) $(3)_I ] ;
  }
  return [ util.join [ util.prepend-if-relative-path $(_libdirs) : $(core.CWD) ] : ":" ] ;
}

rule system.print-library-path
{
  LD_LIBRARY_PATH on $(1) = [ system.convert-path-from-cwd $(LIBDIRS) : $(2) : TARGET_LIBDIRS ] ;
  action.print-library-path $(1) ;
}

rule system.invoke-ant
{
  util.clone-target-variable java : $(1) :
    ANT_BUILD_FILE LD_LIBRARY_PATH CLASSPATH
    SRCDIR BINDIR BINDIR_FROM_SRCDIR GENDIR_FROM_SRCDIR
  ;
  ACTION on $(1) = $(2) ;
  action.invoke-ant $(1) ;
}

rule system.setup-try-libs-for
{
  local _libdirs = [ util.get-target-variable $(1) : TARGET_LIBDIRS ] ;
  util.add-target-variable try-libs@$(system.DOT_TARGET) : TARGET_DIRS : $(_libdirs) ;
  action.install try-libs@$(system.DOT_TARGET) ;
}

rule system.export-to-env 
{
  local _colon = ":" ;
  if $(1) {
    system.ENV_EXPORT_LIST += $(1[1])=$(2:J=$(_colon)) ;
    system.export-to-env $(1[2-]) : $(2) ;
  }
}

core.load-config Jam.action ;
